from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import get_admin_keyboard, get_main_keyboard
from keyboards.inline import get_admin_actions
from utils.users import get_all_users, get_users_count, grant_admin, revoke_admin, is_admin, get_active_users_count, \
    get_all_admins

router = Router()


class BroadcastState(StatesGroup):
    waiting_for_message = State()


class AdminGrantState(StatesGroup):
    waiting_for_user_id = State()


class AdminRevokeState(StatesGroup):
    waiting_for_user_id = State()


# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∫–∏ - –î–£–ë–õ–ò–†–£–ï–ú –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    print(f"üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    admin_text = (
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )
    await message.answer(admin_text, parse_mode="HTML", reply_markup=get_admin_keyboard())


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –î–£–ë–õ–ò–†–£–ï–ú –∫–æ–º–∞–Ω–¥—É
@router.message(Command("stats"))
async def cmd_stats_command(message: types.Message):
    print(f"üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await cmd_stats(message)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
async def cmd_stats(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    users_count = await get_users_count()
    active_users = await get_active_users_count(7)

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{active_users}</b>\n"
        f"üìà –û—Ö–≤–∞—Ç: <b>{(active_users / users_count * 100 if users_count > 0 else 0):.1f}%</b>"
    )
    await message.answer(stats_text, parse_mode="HTML")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –î–£–ë–õ–ò–†–£–ï–ú –∫–æ–º–∞–Ω–¥—É
@router.message(Command("users"))
async def cmd_users_command(message: types.Message):
    print(f"üë• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /users –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await cmd_users(message)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
async def cmd_users(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    users = await get_all_users()
    users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"

    if not users:
        users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        for user in users[:10]:
            users_text += f"‚Ä¢ ID: {user.user_id}\n"
            if user.username:
                users_text += f"  @{user.username}\n"
            if user.first_name:
                users_text += f"  {user.first_name}"
                if user.last_name:
                    users_text += f" {user.last_name}"
                users_text += "\n"
            users_text += f"  üìÖ {user.created_at[:10]}\n\n"

    await message.answer(users_text, parse_mode="HTML", reply_markup=get_admin_actions())


# –†–∞—Å—Å—ã–ª–∫–∞ - –î–£–ë–õ–ò–†–£–ï–ú –∫–æ–º–∞–Ω–¥—É
@router.message(Command("broadcast"))
async def cmd_broadcast_command(message: types.Message, state: FSMContext):
    print(f"üì¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /broadcast –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await cmd_broadcast(message, state)


# –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
async def cmd_broadcast(message: types.Message, state: FSMContext = None):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.",
        parse_mode="HTML"
    )
    if state:
        await state.set_state(BroadcastState.waiting_for_message)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
async def cmd_admins(message: types.Message):
    print(f"üëë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–¥–º–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    admins = await get_all_admins()

    admins_text = "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
    if not admins:
        admins_text = "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n\n–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
    else:
        for admin in admins:
            admins_text += f"‚Ä¢ ID: {admin.user_id}\n"
            if admin.username:
                admins_text += f"  @{admin.username}\n"
            admins_text += f"  üìÖ {admin.created_at[:10]}\n\n"

    await message.answer(admins_text, parse_mode="HTML", reply_markup=get_admin_actions())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext, bot):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        await state.clear()
        return

    users = await get_all_users()
    success_count = 0
    fail_count = 0

    progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    for user in users:
        try:
            await bot.send_message(
                chat_id=user.user_id,
                text=message.text,
                parse_mode="HTML" if message.html_text else None
            )
            success_count += 1
        except Exception as e:
            fail_count += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    result_text = (
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success_count}</b>\n"
        f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{fail_count}</b>\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>"
    )
    await progress_msg.edit_text(result_text, parse_mode="HTML")
    await state.clear()


# Inline –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏
@router.callback_query(F.data == "admin_grant")
async def handle_admin_grant(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return

    await callback.message.answer(
        "üëë <b>–í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É:",
        parse_mode="HTML"
    )
    await state.set_state(AdminGrantState.waiting_for_user_id)
    await callback.answer()


@router.callback_query(F.data == "admin_revoke")
async def handle_admin_revoke(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return

    await callback.message.answer(
        "‚ùå <b>–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É:",
        parse_mode="HTML"
    )
    await state.set_state(AdminRevokeState.waiting_for_user_id)
    await callback.answer()


@router.message(AdminGrantState.waiting_for_user_id)
async def process_admin_grant(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        await state.clear()
        return

    try:
        user_id = int(message.text)
        success = await grant_admin(user_id, "", message.from_user.id)

        if success:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        else:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

    await state.clear()


@router.message(AdminRevokeState.waiting_for_user_id)
async def process_admin_revoke(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        await state.clear()
        return

    try:
        user_id = int(message.text)
        success = await revoke_admin(user_id)

        if success:
            await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        else:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

    await state.clear()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main(message: types.Message):
    await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())