import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù!
BOT_TOKEN = "8285963956:AAECt8ixerW0PqRwDLyilxc0EQsvyzBszZQ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!")
    print("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∫–æ–º–∞–Ω–¥–æ–π /newbot")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ========== –û–ë–´–ß–ù–ê–Ø REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–ê ==========
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üéØ –ò–Ω–ª–∞–π–Ω –º–µ–Ω—é")]
        ],
        resize_keyboard=True,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        one_time_keyboard=False  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    return keyboard

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="üåê –Ø–∑—ã–∫")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

# ========== INLINE-–ö–õ–ê–í–ò–ê–¢–£–†–ê ==========
def get_inline_keyboard():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –ù–∞—à —Å–∞–π—Ç", url="https://example.com")],
            [InlineKeyboardButton(text="üì± –ö–∞–Ω–∞–ª", url="https://t.me/example")],
            [InlineKeyboardButton(text="‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
        ]
    )
    return keyboard

def get_inline_actions():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
             InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"),
             InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
    )
    return keyboard

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã."
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/inline - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é\n"
        "/keyboard - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n\n"
        "<b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:</b>"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

@dp.message(Command("inline"))
async def cmd_inline(message: types.Message):
    await message.answer("üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_inline_keyboard())

@dp.message(Command("keyboard"))
async def cmd_keyboard(message: types.Message):
    await message.answer("‚å®Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics(message: types.Message):
    await message.answer("üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1\n‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: 10\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è",
                        parse_mode="HTML")

@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: types.Message):
    await message.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                        parse_mode="HTML",
                        reply_markup=get_settings_keyboard())

@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contacts(message: types.Message):
    contact_text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üåê –°–∞–π—Ç: example.com\n"
        "üìß Email: info@example.com\n"
        "üì± –¢–µ–ª–µ–≥—Ä–∞–º: @username"
    )
    await message.answer(contact_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    await cmd_help(message)

@dp.message(lambda message: message.text == "üéØ –ò–Ω–ª–∞–π–Ω –º–µ–Ω—é")
async def handle_inline_menu(message: types.Message):
    await cmd_inline(message)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def handle_notifications(message: types.Message):
    await message.answer("üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ",
                        parse_mode="HTML")

@dp.message(lambda message: message.text == "üåê –Ø–∑—ã–∫")
async def handle_language(message: types.Message):
    await message.answer("üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞:</b>\n\n–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫",
                        parse_mode="HTML")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE-–ö–ù–û–ü–û–ö ==========
@dp.callback_query(lambda callback: callback.data == "rating")
async def handle_rating_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("‚≠êÔ∏è <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:</b> 5.0\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!",
                                   parse_mode="HTML")

@dp.callback_query(lambda callback: callback.data == "subscribe")
async def handle_subscribe_callback(callback: types.CallbackQuery):
    await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!", show_alert=True)

@dp.callback_query(lambda callback: callback.data == "contact")
async def handle_contact_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìû –î–ª—è —Å–≤—è–∑–∏: @username")

@dp.callback_query(lambda callback: callback.data == "confirm")
async def handle_confirm_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!",
                                   reply_markup=get_inline_actions())

@dp.callback_query(lambda callback: callback.data == "cancel")
async def handle_cancel_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
                                   reply_markup=get_inline_actions())

@dp.callback_query(lambda callback: callback.data == "refresh")
async def handle_refresh_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ...",
                                   reply_markup=get_inline_actions())

@dp.callback_query(lambda callback: callback.data == "settings")
async def handle_settings_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /keyboard –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                                   parse_mode="HTML",
                                   reply_markup=get_inline_actions())

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========
@dp.message()
async def handle_any_message(message: types.Message):
    await message.answer("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!\n\n"
                        "–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
                        reply_markup=get_main_keyboard())

async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"‚úÖ –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())